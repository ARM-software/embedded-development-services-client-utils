// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ARM-software/embedded-development-services-client-utils/utils/cache (interfaces: IServerCache)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_cache.go -package=mocks github.com/ARM-software/embedded-development-services-client-utils/utils/cache IServerCache
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	cache "github.com/ARM-software/embedded-development-services-client-utils/utils/cache"
	gomock "go.uber.org/mock/gomock"
)

// MockIServerCache is a mock of IServerCache interface.
type MockIServerCache struct {
	ctrl     *gomock.Controller
	recorder *MockIServerCacheMockRecorder
	isgomock struct{}
}

// MockIServerCacheMockRecorder is the mock recorder for MockIServerCache.
type MockIServerCacheMockRecorder struct {
	mock *MockIServerCache
}

// NewMockIServerCache creates a new mock instance.
func NewMockIServerCache(ctrl *gomock.Controller) *MockIServerCache {
	mock := &MockIServerCache{ctrl: ctrl}
	mock.recorder = &MockIServerCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServerCache) EXPECT() *MockIServerCacheMockRecorder {
	return m.recorder
}

// GetCacheControl mocks base method.
func (m *MockIServerCache) GetCacheControl() cache.Control {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheControl")
	ret0, _ := ret[0].(cache.Control)
	return ret0
}

// GetCacheControl indicates an expected call of GetCacheControl.
func (mr *MockIServerCacheMockRecorder) GetCacheControl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheControl", reflect.TypeOf((*MockIServerCache)(nil).GetCacheControl))
}

// GetKey mocks base method.
func (m *MockIServerCache) GetKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetKey indicates an expected call of GetKey.
func (mr *MockIServerCacheMockRecorder) GetKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockIServerCache)(nil).GetKey))
}

// Invalidate mocks base method.
func (m *MockIServerCache) Invalidate(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invalidate", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invalidate indicates an expected call of Invalidate.
func (mr *MockIServerCacheMockRecorder) Invalidate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockIServerCache)(nil).Invalidate), ctx)
}

// SetCacheControl mocks base method.
func (m *MockIServerCache) SetCacheControl(control cache.Control) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCacheControl", control)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCacheControl indicates an expected call of SetCacheControl.
func (mr *MockIServerCacheMockRecorder) SetCacheControl(control any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCacheControl", reflect.TypeOf((*MockIServerCache)(nil).SetCacheControl), control)
}

// SetKey mocks base method.
func (m *MockIServerCache) SetKey(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKey", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKey indicates an expected call of SetKey.
func (mr *MockIServerCacheMockRecorder) SetKey(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKey", reflect.TypeOf((*MockIServerCache)(nil).SetKey), key)
}
