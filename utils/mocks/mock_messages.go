// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ARM-software/embedded-development-services-client-utils/utils/messages (interfaces: IMessage,IMessageLogger)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"

	messages "github.com/ARM-software/embedded-development-services-client-utils/utils/messages"
	pagination "github.com/ARM-software/golang-utils/utils/collection/pagination"
)

// MockIMessage is a mock of IMessage interface.
type MockIMessage struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageMockRecorder
}

// MockIMessageMockRecorder is the mock recorder for MockIMessage.
type MockIMessageMockRecorder struct {
	mock *MockIMessage
}

// NewMockIMessage creates a new mock instance.
func NewMockIMessage(ctrl *gomock.Controller) *MockIMessage {
	mock := &MockIMessage{ctrl: ctrl}
	mock.recorder = &MockIMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessage) EXPECT() *MockIMessageMockRecorder {
	return m.recorder
}

// GetCtimeOk mocks base method.
func (m *MockIMessage) GetCtimeOk() (*time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCtimeOk")
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCtimeOk indicates an expected call of GetCtimeOk.
func (mr *MockIMessageMockRecorder) GetCtimeOk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCtimeOk", reflect.TypeOf((*MockIMessage)(nil).GetCtimeOk))
}

// GetMessageOk mocks base method.
func (m *MockIMessage) GetMessageOk() (*string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageOk")
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetMessageOk indicates an expected call of GetMessageOk.
func (mr *MockIMessageMockRecorder) GetMessageOk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageOk", reflect.TypeOf((*MockIMessage)(nil).GetMessageOk))
}

// GetSeverityOk mocks base method.
func (m *MockIMessage) GetSeverityOk() (*string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeverityOk")
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSeverityOk indicates an expected call of GetSeverityOk.
func (mr *MockIMessageMockRecorder) GetSeverityOk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeverityOk", reflect.TypeOf((*MockIMessage)(nil).GetSeverityOk))
}

// GetSourceOk mocks base method.
func (m *MockIMessage) GetSourceOk() (*string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceOk")
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSourceOk indicates an expected call of GetSourceOk.
func (mr *MockIMessageMockRecorder) GetSourceOk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceOk", reflect.TypeOf((*MockIMessage)(nil).GetSourceOk))
}

// MockIMessageLogger is a mock of IMessageLogger interface.
type MockIMessageLogger struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageLoggerMockRecorder
}

// MockIMessageLoggerMockRecorder is the mock recorder for MockIMessageLogger.
type MockIMessageLoggerMockRecorder struct {
	mock *MockIMessageLogger
}

// NewMockIMessageLogger creates a new mock instance.
func NewMockIMessageLogger(ctrl *gomock.Controller) *MockIMessageLogger {
	mock := &MockIMessageLogger{ctrl: ctrl}
	mock.recorder = &MockIMessageLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessageLogger) EXPECT() *MockIMessageLoggerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockIMessageLogger) Check() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check")
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockIMessageLoggerMockRecorder) Check() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockIMessageLogger)(nil).Check))
}

// Close mocks base method.
func (m *MockIMessageLogger) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIMessageLoggerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIMessageLogger)(nil).Close))
}

// Log mocks base method.
func (m *MockIMessageLogger) Log(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log.
func (mr *MockIMessageLoggerMockRecorder) Log(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockIMessageLogger)(nil).Log), arg0...)
}

// LogEmptyMessageError mocks base method.
func (m *MockIMessageLogger) LogEmptyMessageError() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogEmptyMessageError")
}

// LogEmptyMessageError indicates an expected call of LogEmptyMessageError.
func (mr *MockIMessageLoggerMockRecorder) LogEmptyMessageError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogEmptyMessageError", reflect.TypeOf((*MockIMessageLogger)(nil).LogEmptyMessageError))
}

// LogError mocks base method.
func (m *MockIMessageLogger) LogError(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "LogError", varargs...)
}

// LogError indicates an expected call of LogError.
func (mr *MockIMessageLoggerMockRecorder) LogError(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogError", reflect.TypeOf((*MockIMessageLogger)(nil).LogError), arg0...)
}

// LogMarshallingError mocks base method.
func (m *MockIMessageLogger) LogMarshallingError(arg0 *interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogMarshallingError", arg0)
}

// LogMarshallingError indicates an expected call of LogMarshallingError.
func (mr *MockIMessageLoggerMockRecorder) LogMarshallingError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogMarshallingError", reflect.TypeOf((*MockIMessageLogger)(nil).LogMarshallingError), arg0)
}

// LogMessage mocks base method.
func (m *MockIMessageLogger) LogMessage(arg0 messages.IMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogMessage", arg0)
}

// LogMessage indicates an expected call of LogMessage.
func (mr *MockIMessageLoggerMockRecorder) LogMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogMessage", reflect.TypeOf((*MockIMessageLogger)(nil).LogMessage), arg0)
}

// LogMessagesCollection mocks base method.
func (m *MockIMessageLogger) LogMessagesCollection(arg0 context.Context, arg1 pagination.IGenericPaginator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogMessagesCollection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogMessagesCollection indicates an expected call of LogMessagesCollection.
func (mr *MockIMessageLoggerMockRecorder) LogMessagesCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogMessagesCollection", reflect.TypeOf((*MockIMessageLogger)(nil).LogMessagesCollection), arg0, arg1)
}

// SetLogSource mocks base method.
func (m *MockIMessageLogger) SetLogSource(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLogSource", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLogSource indicates an expected call of SetLogSource.
func (mr *MockIMessageLoggerMockRecorder) SetLogSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogSource", reflect.TypeOf((*MockIMessageLogger)(nil).SetLogSource), arg0)
}

// SetLoggerSource mocks base method.
func (m *MockIMessageLogger) SetLoggerSource(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLoggerSource", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLoggerSource indicates an expected call of SetLoggerSource.
func (mr *MockIMessageLoggerMockRecorder) SetLoggerSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLoggerSource", reflect.TypeOf((*MockIMessageLogger)(nil).SetLoggerSource), arg0)
}
