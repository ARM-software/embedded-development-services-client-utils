/*
 * Copyright (C) 2020-2025 Arm Limited or its affiliates and Contributors. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ARM-software/embedded-development-services-client-utils/utils/store (interfaces: IStore)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_store.go -package=mocks github.com/ARM-software/embedded-development-services-client-utils/utils/store IStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	filesystem "github.com/ARM-software/golang-utils/utils/filesystem"
	gomock "go.uber.org/mock/gomock"
)

// MockIStore is a mock of IStore interface.
type MockIStore struct {
	ctrl     *gomock.Controller
	recorder *MockIStoreMockRecorder
	isgomock struct{}
}

// MockIStoreMockRecorder is the mock recorder for MockIStore.
type MockIStoreMockRecorder struct {
	mock *MockIStore
}

// NewMockIStore creates a new mock instance.
func NewMockIStore(ctrl *gomock.Controller) *MockIStore {
	mock := &MockIStore{ctrl: ctrl}
	mock.recorder = &MockIStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStore) EXPECT() *MockIStoreMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockIStore) Clear(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockIStoreMockRecorder) Clear(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockIStore)(nil).Clear), ctx)
}

// Close mocks base method.
func (m *MockIStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIStore)(nil).Close))
}

// Create mocks base method.
func (m *MockIStore) Create(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIStoreMockRecorder) Create(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIStore)(nil).Create), ctx)
}

// Exists mocks base method.
func (m *MockIStore) Exists() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockIStoreMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIStore)(nil).Exists))
}

// GetElementPath mocks base method.
func (m *MockIStore) GetElementPath(elementName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetElementPath", elementName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetElementPath indicates an expected call of GetElementPath.
func (mr *MockIStoreMockRecorder) GetElementPath(elementName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElementPath", reflect.TypeOf((*MockIStore)(nil).GetElementPath), elementName)
}

// GetFilesystem mocks base method.
func (m *MockIStore) GetFilesystem() filesystem.FS {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystem")
	ret0, _ := ret[0].(filesystem.FS)
	return ret0
}

// GetFilesystem indicates an expected call of GetFilesystem.
func (mr *MockIStoreMockRecorder) GetFilesystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystem", reflect.TypeOf((*MockIStore)(nil).GetFilesystem))
}

// GetPath mocks base method.
func (m *MockIStore) GetPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath.
func (mr *MockIStoreMockRecorder) GetPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockIStore)(nil).GetPath))
}

// HasElement mocks base method.
func (m *MockIStore) HasElement(elementName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasElement", elementName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasElement indicates an expected call of HasElement.
func (mr *MockIStoreMockRecorder) HasElement(elementName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasElement", reflect.TypeOf((*MockIStore)(nil).HasElement), elementName)
}

// SetPath mocks base method.
func (m *MockIStore) SetPath(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPath", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPath indicates an expected call of SetPath.
func (mr *MockIStoreMockRecorder) SetPath(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPath", reflect.TypeOf((*MockIStore)(nil).SetPath), path)
}
